#!/usr/bin/env perl

=head1 NAME

    recordify - convert CSV into a one-line-per-column output

=head1 SYNOPSIS

    recordify

     Options:
       --delimiter      Provide delimiter in the file. A comma is the default.
       --execute        Provide Perl code that operates on %_ where the keys
                        are the keys in the header, which will be evaluated
                        each line.
       --verbose        Print files separated by spaces instead of newlines.

    One note about this script's behavior: it is not intelligent about embedded
    delimiters in the CSV. You may need to pre-process the CSV if it contains
    them.

=cut


use warnings;
use strict;

use Getopt::Long;
use Pod::Usage qw/pod2usage/;

my $delimiter = ',';
my $execute = 0;
my $verbose = 0;

GetOptions(
    'delimiter=s' => \$delimiter,
    'execute=s'   => \$execute,
    'help|?'      => sub { pod2usage() },
    'verbose'     => \$verbose,
);

my $record_count = 0;
my @headers;

while(<>){
    next if m{^$};

    s{\s+$}{};  # using this instead of chomp because the file that I wrote
                # this script for had UTF-8 whitespace characters at the EOL

    my @record_fields = split /$delimiter/;

    if( $record_count++ == 0 ) {
        @headers = @record_fields;
        next;
    }

    local %_;
    @_{@headers} = @record_fields;

    if( $execute ) {
        eval $execute;
    }
    else {
        print '-' x 3, "\n" unless $record_count < 3;

        foreach my $index (0..$#headers) {
            print "$headers[$index]: $record_fields[$index]\n";
        }
    }
}

print "$record_count records processed.\n" if $verbose;
